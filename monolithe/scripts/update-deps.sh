#!/bin/bash

echo "üîÑ Mise √† jour des d√©pendances du monorepo"
echo "=========================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que pnpm est install√©
if ! command -v pnpm &> /dev/null; then
    print_error "pnpm n'est pas install√©"
    print_status "Installation: npm install -g pnpm"
    exit 1
fi

# Fonction pour mettre √† jour un package
update_package() {
    local package_name=$1
    local package_path=$2
    
    if [ -d "$package_path" ]; then
        print_status "Mise √† jour de $package_name..."
        cd "$package_path"
        
        # V√©rifier s'il y a des mises √† jour
        if pnpm outdated | grep -q "Package"; then
            print_status "Mises √† jour disponibles pour $package_name:"
            pnpm outdated
            
            echo ""
            read -p "Mettre √† jour $package_name ? (y/N): " update_confirm
            
            if [[ $update_confirm =~ ^[Yy]$ ]]; then
                print_status "Mise √† jour de $package_name..."
                
                # Mise √† jour interactive
                pnpm update --interactive
                
                if [ $? -eq 0 ]; then
                    print_success "$package_name mis √† jour avec succ√®s"
                else
                    print_error "Erreur lors de la mise √† jour de $package_name"
                fi
            else
                print_warning "Mise √† jour de $package_name annul√©e"
            fi
        else
            print_success "$package_name est √† jour"
        fi
        
        cd - > /dev/null
    else
        print_warning "Dossier $package_path non trouv√©"
    fi
    
    echo ""
}

# Sauvegarder les versions actuelles
print_status "Sauvegarde des versions actuelles..."
if [ -f "pnpm-lock.yaml" ]; then
    cp pnpm-lock.yaml pnpm-lock.yaml.backup
    print_success "pnpm-lock.yaml sauvegard√©"
fi

# Mise √† jour des d√©pendances racine
print_status "Mise √† jour des d√©pendances racine..."
if pnpm outdated | grep -q "Package"; then
    print_status "Mises √† jour disponibles pour les d√©pendances racine:"
    pnpm outdated
    
    echo ""
    read -p "Mettre √† jour les d√©pendances racine ? (y/N): " update_root
    
    if [[ $update_root =~ ^[Yy]$ ]]; then
        print_status "Mise √† jour des d√©pendances racine..."
        pnpm update --interactive
        
        if [ $? -eq 0 ]; then
            print_success "D√©pendances racine mises √† jour"
        else
            print_error "Erreur lors de la mise √† jour des d√©pendances racine"
        fi
    else
        print_warning "Mise √† jour des d√©pendances racine annul√©e"
    fi
else
    print_success "D√©pendances racine √† jour"
fi

echo ""

# Mise √† jour des packages du workspace
print_status "Mise √† jour des packages du workspace..."

# Backend
update_package "Backend" "src"

# Frontend
update_package "Frontend" "frontend"

# Mise √† jour globale des d√©pendances
echo ""
print_status "Mise √† jour globale des d√©pendances..."
read -p "Voulez-vous forcer la mise √† jour de toutes les d√©pendances ? (y/N): " force_update

if [[ $force_update =~ ^[Yy]$ ]]; then
    print_status "Mise √† jour forc√©e en cours..."
    
    # Supprimer le lockfile et r√©installer
    rm -f pnpm-lock.yaml
    pnpm install
    
    if [ $? -eq 0 ]; then
        print_success "Mise √† jour forc√©e termin√©e"
    else
        print_error "Erreur lors de la mise √† jour forc√©e"
        
        # Restaurer la sauvegarde
        if [ -f "pnpm-lock.yaml.backup" ]; then
            print_status "Restauration de la sauvegarde..."
            mv pnpm-lock.yaml.backup pnpm-lock.yaml
            pnpm install
        fi
    fi
else
    print_status "Mise √† jour forc√©e annul√©e"
fi

# V√©rifier les vuln√©rabilit√©s
echo ""
print_status "V√©rification des vuln√©rabilit√©s..."
if pnpm audit; then
    print_success "Aucune vuln√©rabilit√© critique d√©tect√©e"
else
    print_warning "Vuln√©rabilit√©s d√©tect√©es. Consid√©rez pnpm audit --fix"
fi

# Nettoyer les caches
echo ""
print_status "Nettoyage des caches..."
pnpm store prune

if [ $? -eq 0 ]; then
    print_success "Caches nettoy√©s"
else
    print_warning "Erreur lors du nettoyage des caches"
fi

# R√©sum√©
echo ""
echo "üìä R√©sum√© de la mise √† jour:"
echo "============================="
echo "‚úÖ Sauvegarde cr√©√©e: pnpm-lock.yaml.backup"
echo "‚úÖ D√©pendances v√©rifi√©es et mises √† jour"
echo "‚úÖ Vuln√©rabilit√©s v√©rifi√©es"
echo "‚úÖ Caches nettoy√©s"
echo ""
echo "üìã Prochaines √©tapes:"
echo "  1. Tester l'application: pnpm dev"
echo "  2. Lancer les tests: pnpm test"
echo "  3. V√©rifier la sant√©: ./scripts/health-check.sh"
echo ""
echo "üîÑ Pour annuler les changements:"
echo "  mv pnpm-lock.yaml.backup pnpm-lock.yaml && pnpm install"
echo ""
print_success "Mise √† jour termin√©e ! üéâ" 