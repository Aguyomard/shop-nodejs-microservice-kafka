#!/bin/bash

echo "üöÄ D√©marrage rapide du monorepo Node.js + Vue 3"
echo "================================================"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier l'environnement
print_status "V√©rification de l'environnement..."
if ! ./scripts/check-env.sh > /dev/null 2>&1; then
    print_error "L'environnement n'est pas correctement configur√©"
    print_status "Ex√©cutez: ./scripts/check-env.sh"
    exit 1
fi
print_success "Environnement OK"

# Installation des d√©pendances
print_status "Installation des d√©pendances..."
if pnpm install; then
    print_success "D√©pendances install√©es"
else
    print_error "√âchec de l'installation des d√©pendances"
    exit 1
fi

# V√©rifier si Docker est disponible
if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
    print_status "Docker d√©tect√© - Option disponible"
    echo ""
    echo "Choisissez votre m√©thode de d√©marrage:"
    echo "1) D√©veloppement local (recommand√© pour le d√©veloppement)"
    echo "2) Avec Docker (recommand√© pour la production)"
    echo "3) V√©rifier la sant√© des services"
    echo ""
    read -p "Votre choix (1, 2 ou 3): " choice
    
    case $choice in
        2)
            print_status "D√©marrage avec Docker..."
            docker-compose up -d
            print_success "Services d√©marr√©s avec Docker"
            echo ""
            echo "üåê Acc√®s aux services:"
            echo "  Backend:  http://localhost:3000"
            echo "  Frontend: http://localhost:5173"
            echo ""
            echo "üìã Commandes utiles:"
            echo "  docker-compose logs -f    # Voir les logs"
            echo "  docker-compose down       # Arr√™ter les services"
            echo "  ./scripts/health-check.sh # V√©rifier la sant√©"
            ;;
        3)
            print_status "V√©rification de la sant√© des services..."
            ./scripts/health-check.sh
            exit 0
            ;;
        *)
            print_status "D√©marrage en mode d√©veloppement local..."
            ;;
    esac
fi

# D√©marrage en mode d√©veloppement local
if [ "$choice" != "2" ] && [ "$choice" != "3" ]; then
    print_status "D√©marrage en mode d√©veloppement local..."
    echo ""
    echo "üåê Acc√®s aux services:"
    echo "  Backend:  http://localhost:3000"
    echo "  Frontend: http://localhost:5173"
    echo ""
    echo "üìã Commandes utiles:"
    echo "  pnpm dev              # Backend + Frontend"
    echo "  pnpm dev:backend      # Backend uniquement"
    echo "  pnpm dev:frontend     # Frontend uniquement"
    echo "  make help             # Aide Makefile"
    echo "  ./scripts/dev.sh      # Script de d√©veloppement"
    echo "  ./scripts/health-check.sh # V√©rifier la sant√©"
    echo ""
    
    # D√©marrer automatiquement
    read -p "D√©marrer automatiquement ? (y/n): " auto_start
    if [[ $auto_start =~ ^[Yy]$ ]]; then
        print_status "D√©marrage automatique..."
        pnpm dev
    else
        print_status "Pour d√©marrer manuellement: pnpm dev"
    fi
fi

echo ""
print_success "Configuration termin√©e !"
echo ""
echo "üìö Documentation: README.md"
echo "üîß Scripts: ./scripts/"
echo "üê≥ Docker: docker-compose.yml"
echo "üìã Makefile: make help"
echo ""
print_status "Bon d√©veloppement ! üöÄ" 